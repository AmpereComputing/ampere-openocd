#
# OpenOCD Target Configuration for Ampere Altra ("Quicksilver") and
# Ampere Altra Max ("Mystique") processors
#
# Copyright (c) 2019-2021, Ampere Computing LLC
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program;
#
#

# Command Line Argument Description
#
# Life-Cycle State (LCS)
# If not specified, defaults to "Secure LCS"
# LCS=0, "Secure LCS"
# LCS=1, "Chip Manufacturing LCS"
# Syntax: -c "set LCS {0}"
# Syntax: -c "set LCS {1}"
#
# CORELIST_S0, CORELIST_S1
# Specify available CPU cores by number
# Example syntax to connect to CPU cores 16 and 17 for S0 and S1
# Syntax: -c "set CORELIST_S0 {16 17}"
# Syntax: -c "set CORELIST_S1 {16 17}"

#
# Configure defaults for target
# Can be overriden in board configuration file
#

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME qs
}

if { [info exists ENDIAN] } {
	set _ENDIAN $ENDIAN
} else {
	set _ENDIAN little
}

if { [info exists ARMV8_TAPID] } {
	set _ARMV8_TAPID $ARMV8_TAPID
} else {
	if {[string first "qs" $_CHIPNAME] >= 0} {
		# Configure for Quicksilver
		set _ARMV8_TAPID 0x2BA06477
	} else {
		# Configure for Mystique
		set _ARMV8_TAPID 0x3BA06477
	}
}

if { [info exists SMPMPRO_TAPID] } {
	set _SMPMPRO_TAPID $SMPMPRO_TAPID
} else {
	set _SMPMPRO_TAPID 0x4BA00477
}

if { [info exists CORELIST] } {
	set _CORELIST $CORELIST
} else {
	if { [info exists COREMASK_LO] } {
		set _COREMASK_LO $COREMASK_LO
	} else {
		set _COREMASK_LO 0x0
	}

	if { [info exists COREMASK_HI] } {
		set _COREMASK_HI $COREMASK_HI
	} else {
		set _COREMASK_HI 0x0
	}

	set _CORELIST {}

	set _MASK 0x1
	for {set i 0} {$i < 64} {incr i} {
		if {[expr {$_COREMASK_LO & $_MASK}] != 0x0} {
			set _CORELIST "$_CORELIST $i"
		}
		set _MASK [expr {$_MASK << 0x1}]
	}

	set _index $i
	set _MASK 0x1
	for {set i 0} {$i < 64} {incr i} {
		if {[expr {$_COREMASK_HI & $_MASK}] != 0x0} {
			set _CORELIST "$_CORELIST $_index"
		}
		incr _index
		set _MASK [expr {$_MASK << 0x1}]
	}
}

#
# Definition of target names
#
set _TARGETNAME_PMPRO pmpro
set _TARGETNAME_SMPRO smpro
set _TARGETNAME_ARMV8 armv8

#
# Configure JTAG TAPs - TAP chain declaration order is important
#

jtag newtap $_CHIPNAME pmpro.tap -irlen 4 -ircapture 0x1 -irmask 0x3 -expected-id $_SMPMPRO_TAPID
set _TAPNAME_PMPRO $_CHIPNAME.$_TARGETNAME_PMPRO.tap

jtag newtap $_CHIPNAME smpro.tap -irlen 4 -ircapture 0x1 -irmask 0x3 -expected-id $_SMPMPRO_TAPID
set _TAPNAME_SMPRO $_CHIPNAME.$_TARGETNAME_SMPRO.tap

jtag newtap $_CHIPNAME armv8.tap -irlen 4 -ircapture 0x1 -irmask 0x3 -expected-id $_ARMV8_TAPID
set _TAPNAME_ARMV8 $_CHIPNAME.$_TARGETNAME_ARMV8.tap

set _DAPNAME_PMPRO $_CHIPNAME.$_TARGETNAME_PMPRO.dap
set _DAPNAME_SMPRO $_CHIPNAME.$_TARGETNAME_SMPRO.dap
set _DAPNAME_ARMV8 $_CHIPNAME.$_TARGETNAME_ARMV8.dap

set _AP_PMPRO_AHB 0
set _AP_SMPRO_AHB 0
set _AP_ARMV8_ROM 0
set _AP_ARMV8_APB 1
set _AP_ARMV8_AXI 2
set _AP_ARMV8_ROM_ADDR 0x00000000
set _AP_ARMV8_APB_ADDR 0x00010000
set _AP_ARMV8_AXI_ADDR 0x00020000

#
# Configure JTAG DAPs
#

dap create $_DAPNAME_PMPRO -chain-position $_TAPNAME_PMPRO
dap create $_DAPNAME_SMPRO -chain-position $_TAPNAME_SMPRO
dap create $_DAPNAME_ARMV8 -chain-position $_TAPNAME_ARMV8

if { [info exists LCS] && [expr {"$LCS"!="0"}]} {
	#
	# Create the DAP AHB-AP MEM-AP target for the PMPRO CPU
	#

	target create $_CHIPNAME.$_TARGETNAME_PMPRO.ahb mem_ap -endian $_ENDIAN -dap $_DAPNAME_PMPRO -ap-num $_AP_PMPRO_AHB

	#
	# Configure target PMPRO CPU
	#

	target create $_CHIPNAME.$_TARGETNAME_PMPRO cortex_m -endian $_ENDIAN -dap $_DAPNAME_PMPRO -ap-num $_AP_PMPRO_AHB

	#
	# Create the DAP AHB-AP MEM-AP target for the SMPRO CPU
	#

	target create $_CHIPNAME.$_TARGETNAME_SMPRO.ahb mem_ap -endian $_ENDIAN -dap $_DAPNAME_SMPRO -ap-num $_AP_SMPRO_AHB

	#
	# Configure target SMPRO CPU
	#

	target create $_CHIPNAME.$_TARGETNAME_SMPRO cortex_m -endian $_ENDIAN -dap $_DAPNAME_SMPRO -ap-num $_AP_SMPRO_AHB
}

# Create the DAP APB-AP MEM-AP target for the ARMV8 cores
target create $_CHIPNAME.$_TARGETNAME_ARMV8.apb mem_ap -endian $_ENDIAN -dap $_DAPNAME_ARMV8 -ap-num $_AP_ARMV8_APB -apbase $_AP_ARMV8_APB_ADDR

# Create the DAP AXI-AP MEM-AP target for the ARMV8 cores
target create $_CHIPNAME.$_TARGETNAME_ARMV8.axi mem_ap -endian $_ENDIAN -dap $_DAPNAME_ARMV8 -ap-num $_AP_ARMV8_AXI -apbase $_AP_ARMV8_AXI_ADDR

# Set CSW register value default correctly for AXI accessable device memory:
# Select the correct Access Port Number
$_DAPNAME_ARMV8 apsel $_AP_ARMV8_AXI
# First set the CSW to OpenOCD's internal default
$_DAPNAME_ARMV8 apcsw default
# Set Domain[1:0]=b'11  (CSW[14:13]=b'11)
# Set Cache[3:0]=b'0000 (CSW[27:24]=b'0000)
# Porter Cfg registers require secure access, AxPROT[1] (CSW[29]) must be b'0'.
# Set AxPROT[2:0]=b'000 (CSW[30:28]=b'000) for an Unpriveleged, Secure, Data access.
$_DAPNAME_ARMV8 apcsw 0x00006000 0x7F006000

#
# Configure target CPUs
#

# Build string used to enable SMP mode for the ARMv8 CPU cores
set _SMP_STR "target smp"

foreach _index $_CORELIST {
	# Format a string to reference which CPU target to use
	eval [format "set _TARGETNAME $_CHIPNAME.${_TARGETNAME_ARMV8}_%02d" $_index]

	# Create and configure Cross Trigger Interface (CTI) - required for halt and resume
	set _CTINAME $_TARGETNAME.cti
	set _offset [expr {(0x00100000 * $_index) + (0x00200000 * ($_index>>1))}]
	cti create $_CTINAME -dap $_DAPNAME_ARMV8 -ap-num $_AP_ARMV8_APB -baseaddr [expr 0xA0220000 + $_offset]

	# Create the target
	target create $_TARGETNAME aarch64 -endian $_ENDIAN -dap $_DAPNAME_ARMV8 -ap-num $_AP_ARMV8_APB -dbgbase [expr 0xA0210000 + $_offset] -rtos hwthread -cti $_CTINAME -coreid $_index
	set _SMP_STR "$_SMP_STR $_TARGETNAME"

	# Clear CTI output/input enables that are not configured by OpenOCD for aarch64
	$_TARGETNAME configure -event reset-init [subst {
		$_CTINAME write INEN0 0x00000000
		$_CTINAME write INEN1 0x00000000
		$_CTINAME write INEN2 0x00000000
		$_CTINAME write INEN3 0x00000000
		$_CTINAME write INEN4 0x00000000
		$_CTINAME write INEN5 0x00000000
		$_CTINAME write INEN6 0x00000000
		$_CTINAME write INEN7 0x00000000
		$_CTINAME write INEN8 0x00000000

		$_CTINAME write OUTEN0 0x00000000
		$_CTINAME write OUTEN1 0x00000000
		$_CTINAME write OUTEN2 0x00000000
		$_CTINAME write OUTEN3 0x00000000
		$_CTINAME write OUTEN4 0x00000000
		$_CTINAME write OUTEN5 0x00000000
		$_CTINAME write OUTEN6 0x00000000
		$_CTINAME write OUTEN7 0x00000000
		$_CTINAME write OUTEN8 0x00000000
	}]
}
eval $_SMP_STR
