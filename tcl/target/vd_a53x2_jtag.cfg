# SPDX-License-Identifier: GPL-2.0-or-later
# Cadence virtual debug interface
# Arm Cortex A53x2

set _CHIPNAME a53x2
set _MEMSTART 0x00000000
set _MEMSIZE 0x1000000
set _CPUTAPID 0x5ba00477
set _TARGETNAME $_CHIPNAME.cpu
set _CTINAME $_CHIPNAME.cti
set _cores 2

set DBGBASE {0x80810000 0x80910000}
set CTIBASE {0x80820000 0x80920000}

# BFM hierarchical path and input clk period
vdebug bfm_path tbench.u_vd_jtag_bfm 10ns
# DMA Memories to access backdoor (up to 4)
vdebug mem_path tbench.u_memory.mem_array $_MEMSTART $_MEMSIZE

jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

jtag arp_init-reset

dap create $_CHIPNAME.dap -chain-position $_TARGETNAME

for { set _core 0 } { $_core < $_cores } { incr _core } \
{
	cti create $_CTINAME.$_core -dap $_CHIPNAME.dap -ap-num 1 -baseaddr [lindex $CTIBASE $_core]
	set _command "target create $_TARGETNAME.$_core aarch64 -dap $_CHIPNAME.dap \
		-dbgbase [lindex $DBGBASE $_core] -cti $_CTINAME.$_core"
	if { $_core != 0 } {
		# non-boot core examination may fail
		#set _command "$_command -defer-examine"
		set _smp_command "$_smp_command $_TARGETNAME.$_core"
	} else {
		set _smp_command "target smp $_TARGETNAME.$_core"
	}
	eval $_command
}
eval $_smp_command

# default target is A53 core 0
targets $_TARGETNAME.0
