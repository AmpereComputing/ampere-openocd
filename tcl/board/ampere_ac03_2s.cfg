# SPDX-License-Identifier: GPL-2.0-or-later
#
# OpenOCD Board Configuration for the AmpereOne Family processors
#
# Copyright (c) 2021-2023, Ampere Computing LLC
#

# Argument Description
#
# JTAGFREQ
# Set the JTAG clock frequency
# Syntax: -c "set JTAGFREQ {freq_in_khz}"
#
# Life-Cycle State (LCS)
# If not specified, defaults to "Secure LCS"
# LCS=0, "Secure LCS"
# LCS=1, "Chip Manufacturing LCS"
# Syntax: -c "set LCS {0}"
# Syntax: -c "set LCS {1}"
#
# CORELIST_S0, CORELIST_S1
# Specify available physical cores by number
# Example syntax to attach to physical cores 16, 17, 94, 95, 128 and 129 for S0 and S1
# Syntax: -c "set CORELIST_S0 {16 17 94 95 128 129}"
# Syntax: -c "set CORELIST_S1 {16 17 94 95 128 129}"
#
# COREMASK_S0_0, COREMASK_S1_0
# Specify available physical cores 0-63 by mask
# Example syntax to attach to physical cores 16 and 17 for S0 and S1
# Syntax: -c "set COREMASK_S0_0 {0x0000000000030000}"
# Syntax: -c "set COREMASK_S1_0 {0x0000000000030000}"
#
# COREMASK_S0_1, COREMASK_S1_1
# Specify available physical cores 64-127 by mask
# Example syntax to attach to physical cores 94 and 95 for S0 and S1
# Syntax: -c "set COREMASK_S0_1 {0x00000000C0000000}"
# Syntax: -c "set COREMASK_S1_1 {0x00000000C0000000}"
#
# COREMASK_S0_2, COREMASK_S1_2
# Specify available physical cores 128 and above by mask
# Example syntax to attach to physical cores 128 and 129 for S0 and S1
# Syntax: -c "set COREMASK_S0_2 {0x0000000000000003}"
# Syntax: -c "set COREMASK_S1_2 {0x0000000000000003}"
#
# SPLITSMP
# Group all ARMv8 cores per socket into individual SMP sessions
# If not specified, group ARMv8 cores from both sockets into one SMP session
# Syntax: -c "set SPLITSMP {}"

#
# Configure JTAG speed
#

if { [info exists JTAGFREQ] } {
	adapter speed $JTAGFREQ
} else {
	adapter speed 100
}

#
# Configure Board level SMP configuration if necessary
#

if { ![info exists SPLITSMP] } {
	# Group dual chip into a single SMP configuration
	set SMP_STR "target smp"
	set CORE_INDEX_OFFSET 0
}

#
# Configure Resets
#

adapter srst delay 100
jtag_ntrst_delay 100
reset_config trst_and_srst separate

#
# Configure JTAG chain and determine IDCODE
#

source [find target/ampere_ac03_2s_tap.cfg]

#
# Configure Targets
#

if { [info exists CORELIST_S0] || [info exists COREMASK_S0_0] || [info exists COREMASK_S0_1] || [info exists COREMASK_S0_2] || [info exists CORELIST_S1] || [info exists COREMASK_S1_0] || [info exists COREMASK_S1_1] || [info exists COREMASK_S1_2] } {
	set CHIPNAME s1
	if { [info exists CORELIST_S1] } {
		set CORELIST $CORELIST_S1
	} else {
		if { [info exists COREMASK_S1_0] } {
			set COREMASK_0 $COREMASK_S1_0
		} else {
			set COREMASK_0 0x0
		}

		if { [info exists COREMASK_S1_1] } {
			set COREMASK_1 $COREMASK_S1_1
		} else {
			set COREMASK_1 0x0
		}
		if { [info exists COREMASK_S0_2] } {
			set COREMASK_2 $COREMASK_S1_2
		} else {
			set COREMASK_2 0x0
		}
	}
	source [find target/ampere_ac03.cfg]

	set CHIPNAME s0
	if { [info exists CORELIST_S0] } {
		set CORELIST $CORELIST_S0
	} else {
		if { [info exists COREMASK_S0_0] } {
			set COREMASK_0 $COREMASK_S0_0
		} else {
			set COREMASK_0 0x0
		}

		if { [info exists COREMASK_S0_1] } {
			set COREMASK_1 $COREMASK_S0_1
		} else {
			set COREMASK_1 0x0
		}
		if { [info exists COREMASK_S0_2] } {
			set COREMASK_2 $COREMASK_S0_2
		} else {
			set COREMASK_2 0x0
		}
	}
	source [find target/ampere_ac03.cfg]
} else {
	set CHIPNAME s1
	set COREMASK_0 0x0
	set COREMASK_1 0x0
	set COREMASK_2 0x0
	source [find target/ampere_ac03.cfg]

	set CHIPNAME s0
	set COREMASK_0 0x1
	set COREMASK_1 0x0
	set COREMASK_2 0x0
	source [find target/ampere_ac03.cfg]
}

if { ![info exists SPLITSMP] } {
        # For dual socket SMP configuration, evaluate the string
        eval $SMP_STR
}
