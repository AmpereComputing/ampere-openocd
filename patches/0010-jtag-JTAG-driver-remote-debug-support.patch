From 774a02eba5bdfb1d879d3827e9689a162597cf8f Mon Sep 17 00:00:00 2001
From: Daniel Goehring <dgoehrin@os.amperecomputing.com>
Date: Thu, 4 Mar 2021 12:30:00 -0500
Subject: [PATCH 10/34] jtag: JTAG driver remote debug support

Add remote debug support for the upstream community OS JTAG driver.

Both software and hardware accelerated remote debug modes for the
upstream community OS JTAG driver are supported.

Tested on an Ampere dual socket Mt. Jade system with an AST2500 BMC

Change-Id: I4e3866fe3b3d5c09628e3c900ca36874504fe6c0
Signed-off-by: Daniel Goehring <dgoehrin@os.amperecomputing.com>
---
 configure.ac                   |  10 +
 src/helper/uapi_linux_jtag.h   | 211 +++++++++++
 src/jtag/drivers/Makefile.am   |   3 +
 src/jtag/drivers/jtag_driver.c | 642 +++++++++++++++++++++++++++++++++
 src/jtag/interface.h           |   1 +
 src/jtag/interfaces.c          |   3 +
 tcl/interface/jtag_driver.cfg  |  19 +
 7 files changed, 889 insertions(+)
 create mode 100644 src/helper/uapi_linux_jtag.h
 create mode 100644 src/jtag/drivers/jtag_driver.c
 create mode 100644 tcl/interface/jtag_driver.cfg

diff --git a/configure.ac b/configure.ac
index ac2808e1f..6d7625267 100644
--- a/configure.ac
+++ b/configure.ac
@@ -287,6 +287,10 @@ AC_ARG_ENABLE([jtag_dpi],
   AS_HELP_STRING([--enable-jtag_dpi], [Enable building support for JTAG DPI]),
   [build_jtag_dpi=$enableval], [build_jtag_dpi=no])
 
+AC_ARG_ENABLE([jtag_driver],
+  AS_HELP_STRING([--enable-jtag_driver], [Enable building support for JTAG DRIVER]),
+  [build_jtag_driver=$enableval], [build_jtag_driver=yes])
+
 AC_ARG_ENABLE([amtjtagaccel],
   AS_HELP_STRING([--enable-amtjtagaccel], [Enable building the Amontec JTAG-Accelerator driver]),
   [build_amtjtagaccel=$enableval], [build_amtjtagaccel=no])
@@ -549,6 +553,11 @@ AS_IF([test "x$build_jtag_dpi" = "xyes"], [
   AC_DEFINE([BUILD_JTAG_DPI], [0], [0 if you don't want JTAG DPI.])
 ])
 
+AS_IF([test "x$build_jtag_driver" = "xyes"], [
+  AC_DEFINE([BUILD_JTAG_DRIVER], [1], [1 if you want JTAG DRIVER.])
+], [
+  AC_DEFINE([BUILD_JTAG_DRIVER], [0], [0 if you don't want JTAG DRIVER.])
+])
 
 AS_IF([test "x$build_amtjtagaccel" = "xyes"], [
   AC_DEFINE([BUILD_AMTJTAGACCEL], [1], [1 if you want the Amontec JTAG-Accelerator driver.])
@@ -735,6 +744,7 @@ AM_CONDITIONAL([BITBANG], [test "x$build_bitbang" = "xyes"])
 AM_CONDITIONAL([JTAG_VPI], [test "x$build_jtag_vpi" = "xyes"])
 AM_CONDITIONAL([VDEBUG], [test "x$build_vdebug" = "xyes"])
 AM_CONDITIONAL([JTAG_DPI], [test "x$build_jtag_dpi" = "xyes"])
+AM_CONDITIONAL([JTAG_DRIVER], [test "x$build_jtag_driver" = "xyes"])
 AM_CONDITIONAL([USB_BLASTER_DRIVER], [test "x$enable_usb_blaster" != "xno" -o "x$enable_usb_blaster_2" != "xno"])
 AM_CONDITIONAL([AMTJTAGACCEL], [test "x$build_amtjtagaccel" = "xyes"])
 AM_CONDITIONAL([GW16012], [test "x$build_gw16012" = "xyes"])
diff --git a/src/helper/uapi_linux_jtag.h b/src/helper/uapi_linux_jtag.h
new file mode 100644
index 000000000..5af5480f8
--- /dev/null
+++ b/src/helper/uapi_linux_jtag.h
@@ -0,0 +1,211 @@
+/***************************************************************************
+ * SPDX-License-Identifier: GPL-2.0                                        *
+ * include/uapi/linux/jtag.h - JTAG class driver uapi                      *
+ *                                                                         *
+ * Copyright (c) 2018 Mellanox Technologies. All rights reserved.          *
+ * Copyright (c) 2018 Oleksandr Shamray <oleksandrs@mellanox.com>          *
+ * Copyright (c) 2020 Ampere Computing LLC                                 *
+ ***************************************************************************/
+
+typedef __signed__ char __s8;
+typedef unsigned char __u8;
+
+typedef __signed__ short __s16;
+typedef unsigned short __u16;
+
+typedef __signed__ int __s32;
+typedef unsigned int __u32;
+
+typedef __signed__ long long __s64;
+typedef unsigned long long __u64;
+
+#ifndef __UAPI_LINUX_JTAG_H
+#define __UAPI_LINUX_JTAG_H
+
+#define JTAG_MAX_XFER_DATA_LEN 65535
+
+/*
+ * JTAG_XFER_MODE: JTAG transfer mode. Used to set JTAG controller transfer mode
+ * This is bitmask for feature param in jtag_mode for ioctl JTAG_SIOCMODE
+ */
+#define  JTAG_XFER_MODE 0
+/*
+ * JTAG_CONTROL_MODE: JTAG controller mode. Used to set JTAG controller mode
+ * This is bitmask for feature param in jtag_mode for ioctl JTAG_SIOCMODE
+ */
+#define  JTAG_CONTROL_MODE 1
+/*
+ * JTAG_SLAVE_MODE: JTAG slave mode. Used to set JTAG controller slave mode
+ * This is bitmask for mode param in jtag_mode for ioctl JTAG_SIOCMODE
+ */
+#define  JTAG_SLAVE_MODE 0
+/*
+ * JTAG_MASTER_MODE: JTAG master mode. Used to set JTAG controller master mode
+ * This is bitmask for mode param in jtag_mode for ioctl JTAG_SIOCMODE
+ */
+#define  JTAG_MASTER_MODE 1
+/*
+ * JTAG_XFER_HW_MODE: JTAG hardware mode. Used to set HW drived or bitbang
+ * mode. This is bitmask for mode param in jtag_mode for ioctl JTAG_SIOCMODE
+ */
+#define  JTAG_XFER_HW_MODE 1
+/*
+ * JTAG_XFER_SW_MODE: JTAG software mode. Used to set SW drived or bitbang
+ * mode. This is bitmask for mode param in jtag_mode for ioctl JTAG_SIOCMODE
+ */
+#define  JTAG_XFER_SW_MODE 0
+
+/**
+ * enum jtag_endstate:
+ *
+ * @JTAG_STATE_TLRESET: JTAG state machine Test Logic Reset state
+ * @JTAG_STATE_IDLE: JTAG state machine IDLE state
+ * @JTAG_STATE_SELECTDR: JTAG state machine SELECT_DR state
+ * @JTAG_STATE_CAPTUREDR: JTAG state machine CAPTURE_DR state
+ * @JTAG_STATE_SHIFTDR: JTAG state machine SHIFT_DR state
+ * @JTAG_STATE_EXIT1DR: JTAG state machine EXIT-1 DR state
+ * @JTAG_STATE_PAUSEDR: JTAG state machine PAUSE_DR state
+ * @JTAG_STATE_EXIT2DR: JTAG state machine EXIT-2 DR state
+ * @JTAG_STATE_UPDATEDR: JTAG state machine UPDATE DR state
+ * @JTAG_STATE_SELECTIR: JTAG state machine SELECT_IR state
+ * @JTAG_STATE_CAPTUREIR: JTAG state machine CAPTURE_IR state
+ * @JTAG_STATE_SHIFTIR: JTAG state machine SHIFT_IR state
+ * @JTAG_STATE_EXIT1IR: JTAG state machine EXIT-1 IR state
+ * @JTAG_STATE_PAUSEIR: JTAG state machine PAUSE_IR state
+ * @JTAG_STATE_EXIT2IR: JTAG state machine EXIT-2 IR state
+ * @JTAG_STATE_UPDATEIR: JTAG state machine UPDATE IR state
+ */
+enum jtag_endstate {
+	JTAG_STATE_TLRESET,
+	JTAG_STATE_IDLE,
+	JTAG_STATE_SELECTDR,
+	JTAG_STATE_CAPTUREDR,
+	JTAG_STATE_SHIFTDR,
+	JTAG_STATE_EXIT1DR,
+	JTAG_STATE_PAUSEDR,
+	JTAG_STATE_EXIT2DR,
+	JTAG_STATE_UPDATEDR,
+	JTAG_STATE_SELECTIR,
+	JTAG_STATE_CAPTUREIR,
+	JTAG_STATE_SHIFTIR,
+	JTAG_STATE_EXIT1IR,
+	JTAG_STATE_PAUSEIR,
+	JTAG_STATE_EXIT2IR,
+	JTAG_STATE_UPDATEIR
+};
+
+/**
+ * enum jtag_reset:
+ *
+ * @JTAG_NO_RESET: JTAG run TAP from current state
+ * @JTAG_FORCE_RESET: JTAG force TAP to reset state
+ */
+enum jtag_reset {
+	JTAG_NO_RESET = 0,
+	JTAG_FORCE_RESET = 1,
+};
+
+/**
+ * enum jtag_xfer_type:
+ *
+ * @JTAG_SIR_XFER: SIR transfer
+ * @JTAG_SDR_XFER: SDR transfer
+ */
+enum jtag_xfer_type {
+	JTAG_SIR_XFER = 0,
+	JTAG_SDR_XFER = 1,
+};
+
+/**
+ * enum jtag_xfer_direction:
+ *
+ * @JTAG_READ_XFER: read transfer
+ * @JTAG_WRITE_XFER: write transfer
+ * @JTAG_READ_WRITE_XFER: read & write transfer
+ */
+enum jtag_xfer_direction {
+	JTAG_READ_XFER = 1,
+	JTAG_WRITE_XFER = 2,
+	JTAG_READ_WRITE_XFER = 3,
+};
+
+/**
+ * struct jtag_end_tap_state - forces JTAG state machine to go into a TAPC
+ * state
+ *
+ * @reset: 0 - run IDLE/PAUSE from current state
+ *         1 - go through TEST_LOGIC/RESET state before  IDLE/PAUSE
+ * @end: completion flag
+ * @tck: clock counter
+ *
+ * Structure provide interface to JTAG device for JTAG set state execution.
+ */
+struct jtag_end_tap_state {
+	__u8	reset;
+	__u8	endstate;
+	__u8	tck;
+};
+
+/**
+ * struct jtag_xfer - jtag xfer:
+ *
+ * @type: transfer type
+ * @direction: xfer direction
+ * @length: xfer bits len
+ * @tdio : xfer data array
+ * @endir: xfer end state
+ *
+ * Structure provide interface to JTAG device for JTAG SDR/SIR xfer execution.
+ */
+struct jtag_xfer {
+	__u8	type;
+	__u8	direction;
+	__u8	endstate;
+	__u8	padding;
+	__u32	length;
+	__u64	tdio;
+};
+
+/**
+ * struct jtag_bitbang - jtag bitbang:
+ *
+ * @tms: JTAG TMS
+ * @tdi: JTAG TDI (input)
+ * @tdo: JTAG TDO (output)
+ *
+ * Structure provide interface to JTAG device for JTAG bitbang execution.
+ */
+struct tck_bitbang {
+	__u8	tms;
+	__u8	tdi;
+	__u8	tdo;
+} __attribute__((__packed__));
+
+/**
+ * struct jtag_mode - jtag mode:
+ *
+ * @feature: 0 - JTAG feature setting selector for JTAG controller HW/SW
+ *           1 - JTAG feature setting selector for controller
+ *               bus(master/slave) mode.
+ * @mode:    (0 - SW / 1 - HW) for JTAG_XFER_MODE feature(0)
+ *           (0 - Slave / 1 - Master) for JTAG_CONTROL_MODE feature(1)
+ *
+ * Structure provide configuration modes to JTAG device.
+ */
+struct jtag_mode {
+	__u32	feature;
+	__u32	mode;
+};
+
+/* ioctl interface */
+#define __JTAG_IOCTL_MAGIC	0xb2
+
+#define JTAG_SIOCSTATE	_IOW(__JTAG_IOCTL_MAGIC, 0, struct jtag_end_tap_state)
+#define JTAG_SIOCFREQ	_IOW(__JTAG_IOCTL_MAGIC, 1, unsigned int)
+#define JTAG_GIOCFREQ	_IOR(__JTAG_IOCTL_MAGIC, 2, unsigned int)
+#define JTAG_IOCXFER	_IOWR(__JTAG_IOCTL_MAGIC, 3, struct jtag_xfer)
+#define JTAG_GIOCSTATUS _IOWR(__JTAG_IOCTL_MAGIC, 4, enum jtag_endstate)
+#define JTAG_SIOCMODE	_IOW(__JTAG_IOCTL_MAGIC, 5, unsigned int)
+#define JTAG_IOCBITBANG	_IOW(__JTAG_IOCTL_MAGIC, 6, unsigned int)
+
+#endif /* __UAPI_LINUX_JTAG_H */
diff --git a/src/jtag/drivers/Makefile.am b/src/jtag/drivers/Makefile.am
index 6410f3754..45b65a1ed 100644
--- a/src/jtag/drivers/Makefile.am
+++ b/src/jtag/drivers/Makefile.am
@@ -83,6 +83,9 @@ endif
 if JTAG_DPI
 DRIVERFILES += %D%/jtag_dpi.c
 endif
+if JTAG_DRIVER
+DRIVERFILES += %D%/jtag_driver.c
+endif
 if USB_BLASTER_DRIVER
 %C%_libocdjtagdrivers_la_LIBADD += %D%/usb_blaster/libocdusbblaster.la
 include %D%/usb_blaster/Makefile.am
diff --git a/src/jtag/drivers/jtag_driver.c b/src/jtag/drivers/jtag_driver.c
new file mode 100644
index 000000000..65ec82572
--- /dev/null
+++ b/src/jtag/drivers/jtag_driver.c
@@ -0,0 +1,642 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/*
+ * JTAG Driver
+ *
+ * Copyright (C) 2020, Ampere Computing LLC
+ *
+ * Based on:
+ * ftdi.c: (C) 2012 Andreas Fritiofson, <andreas.fritiofson@gmail.com>
+ * jtag_dpi.c: (C) 2013 Franck Jullien, <elec4fun@gmail.com>
+ *             (C) 2019-2020 Ampere Computing LLC
+ */
+
+#include <sys/ioctl.h>
+
+#include <helper/uapi_linux_jtag.h>
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <jtag/interface.h>
+
+#include <fcntl.h>
+
+#define JTAG_INSTANCE 0
+
+/**
+ * Note: When calculating the 8-bit aligned address below for the maximum
+ * JTAG transfer data bit length, the JTAG_MAX_XFER_DATA_LEN define is
+ * adjusted by one bit to account for a code bug in the open-source Linux
+ * JTAG driver. Due to the driver bug, transfers of exact size
+ * JTAG_MAX_XFER_DATA_LEN bits will fail.
+ */
+#define JTAG_MAX_XFER_DATA_LEN_BYTE_ALIGNED (((JTAG_MAX_XFER_DATA_LEN) - 1) & (~0x7))
+#define JTAG_MAX_XFER_DATA_LEN_BYTE_ALIGNED_DIV8 ((JTAG_MAX_XFER_DATA_LEN_BYTE_ALIGNED) >> 3)
+
+int jtag_instance = JTAG_INSTANCE;
+int jtag_hw_accel = 1;
+int jtag_fd;
+
+/* Local Function Prototypes */
+static enum jtag_endstate state_conversion(tap_state_t state);
+static int move_to_state(tap_state_t goal_state);
+static int jtag_driver_get_speed(int *speed);
+static int jtag_driver_set_speed(int speed);
+static int jtag_driver_speed_div(int speed, int *khz);
+static void jtag_driver_end_state(tap_state_t state);
+static int jtag_driver_execute_scan(struct scan_command *scan);
+static int jtag_driver_execute_runtest(int num_cycles, tap_state_t state);
+static int jtag_driver_execute_stableclocks(struct stableclocks_command *stableclocks);
+static int jtag_driver_reset(int trst, int srst);
+static int jtag_driver_execute_sleep(struct sleep_command *sleep);
+static int jtag_driver_execute_tms(struct tms_command *tms);
+static int jtag_driver_execute_queue(void);
+static int jtag_driver_init(void);
+static int jtag_driver_quit(void);
+
+static enum jtag_endstate state_conversion(tap_state_t state)
+{
+	enum jtag_endstate endstate;
+
+	switch (state) {
+		case TAP_DREXIT2:
+			endstate = JTAG_STATE_EXIT2DR;
+			break;
+		case TAP_DREXIT1:
+			endstate = JTAG_STATE_EXIT1DR;
+			break;
+		case TAP_DRSHIFT:
+			endstate = JTAG_STATE_SHIFTDR;
+			break;
+		case TAP_DRPAUSE:
+			endstate = JTAG_STATE_PAUSEDR;
+			break;
+		case TAP_IRSELECT:
+			endstate = JTAG_STATE_SELECTIR;
+			break;
+		case TAP_DRUPDATE:
+			endstate = JTAG_STATE_UPDATEDR;
+			break;
+		case TAP_DRCAPTURE:
+			endstate = JTAG_STATE_CAPTUREDR;
+			break;
+		case TAP_DRSELECT:
+			endstate = JTAG_STATE_SELECTDR;
+			break;
+		case TAP_IREXIT2:
+			endstate = JTAG_STATE_EXIT2IR;
+			break;
+		case TAP_IREXIT1:
+			endstate = JTAG_STATE_EXIT1IR;
+			break;
+		case TAP_IRSHIFT:
+			endstate = JTAG_STATE_SHIFTIR;
+			break;
+		case TAP_IRPAUSE:
+			endstate = JTAG_STATE_PAUSEIR;
+			break;
+		case TAP_IDLE:
+			endstate = JTAG_STATE_IDLE;
+			break;
+		case TAP_IRUPDATE:
+			endstate = JTAG_STATE_UPDATEIR;
+			break;
+		case TAP_IRCAPTURE:
+			endstate = JTAG_STATE_CAPTUREIR;
+			break;
+		case TAP_RESET:
+			endstate = JTAG_STATE_TLRESET;
+			break;
+		default:
+			LOG_ERROR("JTAG DRIVER ERROR: unknown JTAG state encountered %d", state);
+			endstate = JTAG_STATE_IDLE;
+	}
+
+	return endstate;
+}
+
+/**
+ * Function move_to_state
+ * moves the TAP controller from the current state to a
+ * goal_state through a path given by tap_get_tms_path().
+ * State transition logging is performed by delegation to clock_tms().
+ *
+ * @param goal_state is the destination state for the move.
+ */
+static int move_to_state(tap_state_t goal_state)
+{
+	struct jtag_end_tap_state end_state;
+	int ret = ERROR_OK;
+	int ret_errno;
+
+	end_state.reset = JTAG_NO_RESET;
+	end_state.endstate = state_conversion(goal_state);
+	end_state.tck = 0;
+
+	ret_errno = ioctl(jtag_fd, JTAG_SIOCSTATE, &end_state);
+	if (ret_errno < 0) {
+		LOG_ERROR("JTAG DRIVER ERROR: state transition failed");
+		ret = ERROR_FAIL;
+	} else {
+		tap_set_state(goal_state);
+	}
+
+	return ret;
+}
+
+static int jtag_driver_get_speed(int *speed)
+{
+	int ret = ERROR_OK;
+	int ret_errno;
+	int local_speed;
+
+	ret_errno = ioctl(jtag_fd, JTAG_GIOCFREQ, &local_speed);
+	if (ret_errno < 0) {
+		LOG_ERROR("JTAG DRIVER ERROR: ioctl call fail for %s", __func__);
+		ret = ERROR_FAIL;
+	} else if (!speed) {
+		LOG_INFO("JTAG DRIVER INFO: Read JTAG TCK frequency of %u", local_speed);
+	} else {
+		*speed = local_speed;
+	}
+
+	return ret;
+}
+
+static int jtag_driver_set_speed(int expected_speed)
+{
+	int ret = ERROR_OK;
+	int ret_errno;
+	int actual_speed;
+
+	ret_errno = ioctl(jtag_fd, JTAG_SIOCFREQ, &expected_speed);
+	if (ret_errno < 0) {
+		LOG_ERROR("JTAG DRIVER ERROR: unable to program JTAG TCK frequency");
+		ret = ERROR_FAIL;
+	} else {
+		ret = jtag_driver_get_speed(&actual_speed);
+		if (ret != ERROR_OK)
+			LOG_ERROR("JTAG DRIVER ERROR: Set requested JTAG TCK frequency "
+				"to %u, unable to verify set frequency", expected_speed);
+		else
+			LOG_INFO("JTAG DRIVER INFO: Requested JTAG TCK frequency "
+				"%u, actual frequency %u", expected_speed, actual_speed);
+	}
+
+	return ret;
+}
+
+static int jtag_driver_speed_div(int speed, int *khz)
+{
+	*khz = speed / 1000;
+	return ERROR_OK;
+}
+
+static int jtag_driver_khz(int khz, int *jtag_speed)
+{
+	*jtag_speed = khz * 1000;
+	return ERROR_OK;
+}
+
+static void jtag_driver_end_state(tap_state_t state)
+{
+	if (tap_is_state_stable(state)) {
+		tap_set_end_state(state);
+	} else {
+		LOG_ERROR("JTAG DRIVER ERROR: %s is not a stable end state", tap_state_name(state));
+		exit(-1);
+	}
+}
+
+/**
+ * jtag_driver_execute_scan - launches a IR-scan or DR-scan
+ * @cmd: the command to launch
+ *
+ * Launch a JTAG IR-scan or DR-scan
+ *
+ * Returns ERROR_OK if OK, otherwise ERROR_XXX
+ */
+static int jtag_driver_execute_scan(struct scan_command *scan)
+{
+	tap_state_t end_state;
+	struct jtag_xfer xfer;
+	struct jtag_xfer xfer_copy;
+	enum scan_type type;
+	uint8_t *data_buf_start;
+	uint8_t *data_buf_chunk;
+	int num_bits;
+	int ret = ERROR_OK;
+	int ret_errno;
+
+	type = jtag_scan_type(scan);
+
+	LOG_DEBUG_IO("JTAG DRIVER DEBUG: %s type:%d", scan->ir_scan ? "IRSCAN" : "DRSCAN",
+		type);
+
+	num_bits = jtag_build_buffer(scan, &data_buf_start);
+	data_buf_chunk = data_buf_start;
+
+	if (scan->ir_scan)
+		xfer_copy.type = JTAG_SIR_XFER;
+	else
+		xfer_copy.type = JTAG_SDR_XFER;
+
+	if (type == SCAN_IN) {
+		/* From target to host */
+		xfer_copy.direction = JTAG_READ_XFER;
+	} else if (type == SCAN_OUT) {
+		/* From host to target */
+		xfer_copy.direction = JTAG_WRITE_XFER;
+	} else {
+		/* Full-duplex scan */
+		xfer_copy.direction = JTAG_READ_WRITE_XFER;
+	}
+
+	while (num_bits > 0) {
+		xfer.type = xfer_copy.type;
+		xfer.direction = xfer_copy.direction;
+		xfer.tdio = (__u64)(uintptr_t)data_buf_chunk;
+		if (num_bits > JTAG_MAX_XFER_DATA_LEN_BYTE_ALIGNED) {
+			xfer.length = (__u32)JTAG_MAX_XFER_DATA_LEN_BYTE_ALIGNED;
+			if (scan->ir_scan)
+				xfer.endstate = state_conversion(TAP_IRPAUSE);
+			else
+				xfer.endstate = state_conversion(TAP_DRPAUSE);
+		} else {
+			xfer.length = (__u32)num_bits;
+			xfer.endstate = state_conversion(scan->end_state);
+		}
+
+		ret_errno = ioctl(jtag_fd, JTAG_IOCXFER, &xfer);
+		if (ret_errno < 0) {
+			LOG_ERROR("JTAG DRIVER ERROR: unable to scan");
+			ret = ERROR_FAIL;
+		} else {
+			if (num_bits > JTAG_MAX_XFER_DATA_LEN_BYTE_ALIGNED) {
+				if (scan->ir_scan)
+					end_state = TAP_IRPAUSE;
+				else
+					end_state = TAP_DRPAUSE;
+			} else {
+				end_state = scan->end_state;
+			}
+			tap_set_state(end_state);
+
+			if (type != SCAN_OUT)
+				ret = jtag_read_buffer(data_buf_chunk, scan);
+
+			LOG_DEBUG_IO("JTAG DRIVER DEBUG: %s scan, %i bits, end in %s",
+				(scan->ir_scan) ? "IR" : "DR", num_bits,
+				tap_state_name(end_state));
+		}
+
+		if (ret != ERROR_OK)
+			break;
+
+		num_bits -= MIN(num_bits, JTAG_MAX_XFER_DATA_LEN_BYTE_ALIGNED);
+		data_buf_chunk += JTAG_MAX_XFER_DATA_LEN_BYTE_ALIGNED_DIV8;
+	}
+
+	free(data_buf_start);
+
+	return ret;
+}
+
+static int jtag_driver_execute_runtest(int num_cycles, tap_state_t state)
+{
+	struct tck_bitbang bitbang;
+	int i;
+	int ret = ERROR_OK;
+	int ret_errno;
+
+	LOG_DEBUG_IO("JTAG DRIVER DEBUG: runtest %i cycles, end in %s", num_cycles,
+		tap_state_name(state));
+
+	if (tap_get_state() != TAP_IDLE)
+		move_to_state(TAP_IDLE);
+
+	bitbang.tms = (__u8)0;
+	bitbang.tdi = (__u8)0; /* write: host to device */
+	bitbang.tdo = (__u8)0; /* read: device to host */
+
+	for (i = 0; i < num_cycles && ret == ERROR_OK; i++) {
+		ret_errno = ioctl(jtag_fd, JTAG_IOCBITBANG, &bitbang);
+		if (ret_errno < 0) {
+			LOG_ERROR("JTAG DRIVER ERROR: couldn't execute runtest");
+			ret = ERROR_FAIL;
+		}
+	}
+
+	jtag_driver_end_state(state);
+
+	if (tap_get_state() != tap_get_end_state())
+		move_to_state(tap_get_end_state());
+
+	LOG_DEBUG_IO("JTAG DRIVER DEBUG: runtest: %i, end in %s", num_cycles,
+		tap_state_name(tap_get_end_state()));
+
+	return ret;
+}
+
+static int jtag_driver_execute_stableclocks(struct stableclocks_command *stableclocks)
+{
+	int num_cycles = stableclocks->num_cycles;
+	int ret = ERROR_OK;
+
+	ret = jtag_driver_execute_runtest(num_cycles, TAP_IDLE);
+	if (ret != ERROR_OK)
+		LOG_ERROR("JTAG DRIVER ERROR: Fail in %s", __func__);
+	else
+		LOG_DEBUG_IO("JTAG DRIVER DEBUG: clocks %i while in %s", num_cycles,
+			tap_state_name(tap_get_state()));
+
+	return ret;
+}
+
+static int jtag_driver_reset(int trst, int srst)
+{
+	struct jtag_end_tap_state end_state;
+	struct tms_command tms;
+	struct jtag_xfer xfer;
+	uint32_t data_buf;
+	int ret = ERROR_OK;
+	int ret_errno;
+	uint8_t bits;
+
+	LOG_DEBUG_IO("JTAG DRIVER DEBUG: reset trst: %i srst %i", trst, srst);
+
+	if (trst == 1) {
+		if (jtag_hw_accel == 0) {
+			/* SW (bitbang) mode */
+			/* Perform ioctl() JTAG_SIOCSTATE call to reset JTAG */
+			/* controller state to Test-Logic-Reset (TLR) */
+			end_state.reset = JTAG_FORCE_RESET;
+			end_state.endstate = JTAG_STATE_TLRESET;
+			end_state.tck = 0;
+			ret_errno = ioctl(jtag_fd, JTAG_SIOCSTATE, &end_state);
+			if (ret_errno < 0) {
+				LOG_ERROR("JTAG DRIVER ERROR: couldn't reset JTAG state machine");
+				ret = ERROR_FAIL;
+			} else {
+				LOG_INFO("JTAG DRIVER INFO: SW - Successfully reset JTAG state machine");
+				tap_set_state(TAP_RESET);
+			}
+		} else {
+			/* HW acceleration mode enabled */
+
+			/* There are two issues with initializing the controller for HW mode. */
+			/* 1. Resetting the JTAG state machine to Test-Logic-Reset (TLR) */
+			/*    doesn't work with the ioctl() JTAG_SIOCSTATE call as it */
+			/*    does with (bitbang) mode. The workaround is to force */
+			/*    a reset by holding TMS high and pulsing TCK five times. */
+			/* 2. After switching to HW mode and resetting the JTAG state */
+			/*    machine to TLR, for Coresight topology, the first */
+			/*    DP CTRL/STAT read returns incorrect data. The workaround */
+			/*    is after switching to HW mode and resetting to TLR state, */
+			/*    perform a dummy DR read (not write) and discard the result. */
+			bits = 0x1F;
+			tms.num_bits = 5;
+			tms.bits = &bits;
+			ret = jtag_driver_execute_tms(&tms);
+			if (ret != ERROR_OK) {
+				LOG_ERROR("JTAG DRIVER ERROR: couldn't reset JTAG state machine");
+			} else {
+				LOG_INFO("JTAG DRIVER INFO: HW - Successfully reset JTAG state machine");
+				/* Bug Workaround - perform the dummy DR read */
+				xfer.type = JTAG_SDR_XFER;       /* Type is DR scan */
+				xfer.direction = JTAG_READ_XFER; /* Only perform DR read, no write */
+				xfer.length = (__u32)1;          /* Only a single bit is needed */
+				xfer.tdio = (__u64)(uintptr_t)(&data_buf);  /* Location to store read result */
+				xfer.endstate = JTAG_STATE_TLRESET;
+
+				ret_errno = ioctl(jtag_fd, JTAG_IOCXFER, &xfer);
+				if (ret_errno < 0) {
+					LOG_ERROR("JTAG DRIVER ERROR: scan failed");
+					ret = ERROR_FAIL;
+				} else {
+					tap_set_state(TAP_RESET);
+				}
+			}
+		}
+	}
+
+	if (srst == 1) {
+		LOG_ERROR("JTAG DRIVER ERROR: Can't assert SRST: nSRST signal is not defined");
+		ret = ERROR_FAIL;
+	}
+
+	return ret;
+}
+
+static int jtag_driver_execute_sleep(struct sleep_command *sleep)
+{
+	LOG_DEBUG_IO("JTAG DRIVER DEBUG: sleep %" PRIi32, sleep->us);
+
+	jtag_sleep(sleep->us);
+
+	LOG_DEBUG_IO("JTAG DRIVER DEBUG: sleep %" PRIi32 " usec while in %s",
+		sleep->us,
+		tap_state_name(tap_get_state()));
+
+	return ERROR_OK;
+}
+
+static int jtag_driver_execute_tms(struct tms_command *tms)
+{
+	struct tck_bitbang bitbang;
+	int ret = ERROR_OK;
+	int ret_errno;
+	unsigned int index, this_len, i, j;
+	unsigned int tms_num_bits = tms->num_bits;
+	uint8_t tms_bits = tms->bits[0];
+
+	LOG_DEBUG_IO("JTAG DRIVER DEBUG: TMS: %d bits", tms_num_bits);
+
+	bitbang.tdi = (__u8)0;
+	bitbang.tdo = (__u8)0;
+
+	index = 0;
+	j = 0;
+
+	while ((j < tms_num_bits) && (ret == ERROR_OK)) {
+		this_len = tms_num_bits > 8 ? 8 : tms_num_bits;
+		for (i = 0; i < this_len && ret == ERROR_OK; i++) {
+			bitbang.tms = (__u8)((tms_bits >> i) & 0x1);
+			ret_errno = ioctl(jtag_fd, JTAG_IOCBITBANG, &bitbang);
+			if (ret_errno < 0) {
+				LOG_ERROR("JTAG DRIVER ERROR: execute_tms failed");
+				ret = ERROR_FAIL;
+			} else {
+				tap_set_state(tap_state_transition(tap_get_state(), (tms_bits >> i) & 0x1));
+			}
+		}
+		j += this_len;
+		if (j < tms_num_bits) {
+			index++;
+			tms_bits = tms->bits[index];
+		}
+	}
+
+	return ret;
+}
+
+static int jtag_driver_execute_queue(void)
+{
+	struct jtag_command *cmd;
+	int ret = ERROR_OK;
+
+	for (cmd = jtag_command_queue; ret == ERROR_OK && cmd;
+	   cmd = cmd->next) {
+		switch (cmd->type) {
+		case JTAG_SCAN:
+			ret = jtag_driver_execute_scan(cmd->cmd.scan);
+			break;
+		case JTAG_TLR_RESET:
+			ret = jtag_driver_reset(1, 0);
+			break;
+		case JTAG_RUNTEST:
+			ret = jtag_driver_execute_runtest(cmd->cmd.runtest->num_cycles,
+							cmd->cmd.runtest->end_state);
+			break;
+		case JTAG_RESET:
+			LOG_INFO("JTAG DRIVER INFO: Received deprecated JTAG_RESET command");
+			break;
+		case JTAG_PATHMOVE:
+			break;
+		case JTAG_SLEEP:
+			ret = jtag_driver_execute_sleep(cmd->cmd.sleep);
+			break;
+		case JTAG_STABLECLOCKS:
+			ret = jtag_driver_execute_stableclocks(cmd->cmd.stableclocks);
+			break;
+		case JTAG_TMS:
+			ret = jtag_driver_execute_tms(cmd->cmd.tms);
+			break;
+		default:
+			LOG_ERROR("JTAG DRIVER ERROR: unknown JTAG command type encountered 0x%X",
+				  cmd->type);
+			ret = ERROR_FAIL;
+			break;
+		}
+	}
+
+	return ret;
+}
+
+static int jtag_driver_init(void)
+{
+	struct jtag_mode jmode;
+	int ret = ERROR_OK;
+	int ret_errno;
+	char buf[32];
+
+	snprintf(buf, sizeof(buf), "/dev/jtag%u", jtag_instance);
+	jtag_fd = open(buf, O_RDWR);
+	if (jtag_fd < 0) {
+		LOG_ERROR("JTAG DRIVER ERROR: Could not open JTAG device");
+		LOG_ERROR("JTAG DRIVER ERROR: Connection to /dev/jtag%u failed", jtag_instance);
+		return ERROR_FAIL;
+	}
+	LOG_INFO("JTAG DRIVER INFO: Connection to /dev/jtag%u succeeded", jtag_instance);
+
+	jmode.feature = JTAG_CONTROL_MODE;
+	jmode.mode = JTAG_MASTER_MODE;   /* JTAG_MASTER_MODE or JTAG_SLAVE_MODE */
+	ret_errno = ioctl(jtag_fd, JTAG_SIOCMODE, &jmode);
+	if (ret_errno < 0) {
+		LOG_ERROR("JTAG DRIVER ERROR: unable to set JTAG_CONTROL_MODE");
+		ret = ERROR_FAIL;
+	} else {
+		jmode.feature = JTAG_XFER_MODE;
+		if (jtag_hw_accel == 0)
+			jmode.mode = JTAG_XFER_SW_MODE;
+		else
+			jmode.mode = JTAG_XFER_HW_MODE;
+
+		ret_errno = ioctl(jtag_fd, JTAG_SIOCMODE, &jmode);
+		if (ret_errno < 0) {
+			LOG_ERROR("JTAG DRIVER ERROR: unable to set JTAG_XFER_MODE");
+			ret = ERROR_FAIL;
+		} else if (jmode.mode == JTAG_XFER_HW_MODE) {
+			LOG_INFO("JTAG DRIVER INFO: Hardware Acceleration mode enabled");
+		} else {
+			LOG_INFO("JTAG DRIVER INFO: Software mode enabled");
+		}
+	}
+
+	return ret;
+}
+
+static int jtag_driver_quit(void)
+{
+	int ret = ERROR_OK;
+
+	close(jtag_fd);
+
+	return ret;
+}
+
+COMMAND_HANDLER(jtag_driver_set_instance)
+{
+	if (CMD_ARGC > 1)
+		return ERROR_COMMAND_SYNTAX_ERROR;
+	else if (CMD_ARGC == 1)
+		COMMAND_PARSE_NUMBER(int, CMD_ARGV[0], jtag_instance);
+
+	LOG_INFO("JTAG DRIVER INFO: Using /dev/jtag%u", jtag_instance);
+
+	return ERROR_OK;
+}
+
+COMMAND_HANDLER(jtag_driver_hw_accel)
+{
+	if (CMD_ARGC > 1)
+		return ERROR_COMMAND_SYNTAX_ERROR;
+	else if (CMD_ARGC == 1)
+		COMMAND_PARSE_NUMBER(int, CMD_ARGV[0], jtag_hw_accel);
+
+	if (jtag_hw_accel == 0)
+		LOG_INFO("JTAG DRIVER INFO: Using Software mode");
+	else
+		LOG_INFO("JTAG DRIVER INFO: Using Hardware Acceleration mode");
+
+	return ERROR_OK;
+}
+
+static const struct command_registration jtag_driver_command_handlers[] = {
+	{
+		.name = "jtag_driver_set_instance",
+		.handler = &jtag_driver_set_instance,
+		.mode = COMMAND_CONFIG,
+		.help = "set the instance of the JTAG device",
+		.usage = "description_string",
+	},
+	{
+		.name = "jtag_driver_hw_accel",
+		.handler = &jtag_driver_hw_accel,
+		.mode = COMMAND_CONFIG,
+		.help = "enable or disable JTAG controller hardware acceleration",
+		.usage = "description_string",
+	},
+	COMMAND_REGISTRATION_DONE
+};
+
+static struct jtag_interface jtag_driver_interface = {
+	.supported = DEBUG_CAP_TMS_SEQ,
+	.execute_queue = jtag_driver_execute_queue,
+};
+
+struct adapter_driver jtag_driver_adapter_driver = {
+	.name = "jtag_driver",
+	.transports = jtag_only,
+	.commands = jtag_driver_command_handlers,
+
+	.init = jtag_driver_init,
+	.quit = jtag_driver_quit,
+	.reset = jtag_driver_reset,
+	.speed = jtag_driver_set_speed,
+	.khz = jtag_driver_khz,
+	.speed_div = jtag_driver_speed_div,
+	.jtag_ops = &jtag_driver_interface,
+};
diff --git a/src/jtag/interface.h b/src/jtag/interface.h
index 50044935b..e08b6f761 100644
--- a/src/jtag/interface.h
+++ b/src/jtag/interface.h
@@ -379,6 +379,7 @@ extern struct adapter_driver hl_adapter_driver;
 extern struct adapter_driver imx_gpio_adapter_driver;
 extern struct adapter_driver jlink_adapter_driver;
 extern struct adapter_driver jtag_dpi_adapter_driver;
+extern struct adapter_driver jtag_driver_adapter_driver;
 extern struct adapter_driver jtag_vpi_adapter_driver;
 extern struct adapter_driver kitprog_adapter_driver;
 extern struct adapter_driver linuxgpiod_adapter_driver;
diff --git a/src/jtag/interfaces.c b/src/jtag/interfaces.c
index 48a194fd5..f490a1ae2 100644
--- a/src/jtag/interfaces.c
+++ b/src/jtag/interfaces.c
@@ -60,6 +60,9 @@ struct adapter_driver *adapter_drivers[] = {
 #if BUILD_JTAG_DPI == 1
 		&jtag_dpi_adapter_driver,
 #endif
+#if BUILD_JTAG_DRIVER == 1
+		&jtag_driver_adapter_driver,
+#endif
 #if BUILD_FT232R == 1
 		&ft232r_adapter_driver,
 #endif
diff --git a/tcl/interface/jtag_driver.cfg b/tcl/interface/jtag_driver.cfg
new file mode 100644
index 000000000..8238cb23c
--- /dev/null
+++ b/tcl/interface/jtag_driver.cfg
@@ -0,0 +1,19 @@
+# SPDX-License-Identifier: GPL-2.0-or-later
+
+#
+# Provide support for the JTAG Driver
+#
+# Copyright (c) 2020, Ampere Computing LLC
+#
+
+adapter driver jtag_driver
+
+# Set the JTAG /dev/jtagX device instance for 'X'
+if { [info exists JTAG_INSTANCE] } {
+   set _JTAG_INSTANCE $JTAG_INSTANCE
+} else {
+   set _JTAG_INSTANCE 0
+}
+
+jtag_driver_set_instance $_JTAG_INSTANCE
+jtag_driver_hw_accel 1
-- 
2.25.1

